{"version":3,"sources":["ui/ActiveDescendant.js","util/uniqueId.js","ui/OuterHTMLView.js","App.js","reportWebVitals.js","index.js"],"names":["LIST_ITEMS","href","ActiveDescendant","forwardRef","_","ref","useState","activeKey","setActiveKey","activeDescendantId","useMemo","random","toString","substr","setRelativeActiveKey","useCallback","delta","keys","Object","index","indexOf","Math","max","min","length","handleNextActive","handlePrevActive","handleKeyDown","event","key","preventDefault","className","onKeyDown","role","tabIndex","entries","map","value","classNames","id","undefined","OuterHTMLView","elementRef","intervalInMS","outerHTML","setOuterHTML","useEffect","interval","setInterval","format","current","parser","plugins","parserHTML","clearInterval","App","activeDescendantRef","useRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42fac7ac.chunk.js","sourcesContent":["import { forwardRef, useCallback, useMemo, useState } from 'react';\nimport classNames from 'classnames';\n\nimport './ActiveDescendant.css';\nimport uniqueId from '../util/uniqueId';\n\nconst LIST_ITEMS = {\n  'id-0': 'In the Milne books',\n  'id-1': 'Pooh is naive and slow-witted',\n  'id-2': 'but he is also friendly',\n  'id-3': 'thoughtful and steadfast',\n  'id-4': (\n    <>\n      An authorised sequel{' '}\n      <a href=\"https://en.wikipedia.org/wiki/Return_to_the_Hundred_Acre_Wood\">Return to the Hundred Acre Wood</a> was\n      published on 5 October 2009\n    </>\n  )\n};\n\nconst ActiveDescendant = forwardRef((_, ref) => {\n  const [activeKey, setActiveKey] = useState('id-0');\n\n  const activeDescendantId = useMemo(() => {\n    return `active-descendant__id-${uniqueId()}`;\n\n    // We explicitly update `activeDescendantId` when `activeKey` changed.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeKey]);\n\n  const setRelativeActiveKey = useCallback(\n    delta =>\n      setActiveKey(activeKey => {\n        const keys = Object.keys(LIST_ITEMS);\n        const index = keys.indexOf(activeKey);\n\n        const nextIndex = Math.max(0, Math.min(keys.length - 1, index + delta));\n\n        return keys[nextIndex];\n      }),\n    [setActiveKey]\n  );\n\n  const handleNextActive = useCallback(() => setRelativeActiveKey(1), [setRelativeActiveKey]);\n\n  const handlePrevActive = useCallback(() => setRelativeActiveKey(-1), [setRelativeActiveKey]);\n\n  const handleKeyDown = useCallback(\n    event => {\n      switch (event.key) {\n        case 'ArrowUp':\n          event.preventDefault();\n          handlePrevActive();\n          break;\n\n        case 'ArrowDown':\n          event.preventDefault();\n          handleNextActive();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [handleNextActive, handlePrevActive]\n  );\n\n  return (\n    <div\n      aria-activedescendant={activeDescendantId}\n      className=\"active-descendant\"\n      onKeyDown={handleKeyDown}\n      ref={ref}\n      role=\"group\"\n      tabIndex=\"0\"\n    >\n      <ul className=\"active-descendant__list\">\n        {Object.entries(LIST_ITEMS).map(([key, value]) => (\n          <li\n            className={classNames('active-descendant__item', {\n              'active-descendant__item--active': key === activeKey\n            })}\n            id={key === activeKey ? activeDescendantId : undefined}\n            key={key}\n          >\n            {value}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n\nexport default ActiveDescendant;\n","import random from 'math-random';\n\nexport default function uniqueId() {\n  return random().toString(36).substr(2, 5);\n}\n","import { format } from 'prettier/standalone';\nimport parserHTML from 'prettier/parser-html';\n\nimport './OuterHTMLView.css';\nimport { useEffect, useState } from 'react';\n\nconst OuterHTMLView = ({ elementRef, intervalInMS = 1000 }) => {\n  const [outerHTML, setOuterHTML] = useState('');\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setOuterHTML(format(elementRef.current.outerHTML, { parser: 'html', plugins: [parserHTML] }));\n    }, intervalInMS);\n\n    return () => clearInterval(interval);\n  }, [elementRef, intervalInMS, setOuterHTML]);\n\n  return <pre className=\"outer-html-view\">{outerHTML}</pre>;\n};\n\nexport default OuterHTMLView;\n","import { useRef } from 'react';\nimport './App.css';\n\nimport ActiveDescendant from './ui/ActiveDescendant';\nimport OuterHTMLView from './ui/OuterHTMLView';\n\nfunction App() {\n  const activeDescendantRef = useRef();\n\n  return (\n    <div className=\"App\">\n      <h1>Background</h1>\n      <p>\n        We are using{' '}\n        <a href=\"https://www.w3.org/TR/wai-aria/#aria-activedescendant\">\n          <code>aria-activedescendant</code>\n        </a>{' '}\n        to drive the navigation pattern.\n      </p>\n      <h1>Steps</h1>\n      <ol>\n        <li>Start screen reader.</li>\n        <li>\n          Press <kbd>TAB</kbd> to focus to the list below, should see a solid black border.\n        </li>\n        <li>\n          Disable scan mode by pressing <kbd>CAPS</kbd> + <kbd>SPACE</kbd> (higher pitch sound in NVDA indicate scan\n          mode is disabled).\n          <ul>\n            <li>Apple VoiceOver do not have scan mode.</li>\n          </ul>\n        </li>\n        <li>\n          Press <kbd>UP</kbd>/<kbd>DOWN</kbd> arrow keys to navigate across items, should see both solid and dashed\n          border.\n        </li>\n      </ol>\n      <p>\n        <strong>EXPECT</strong>: When using arrow keys to navigate, screen reader should read each of the list item correctly.\n      </p>\n      <h1>Try this out</h1>\n      <ActiveDescendant ref={activeDescendantRef} />\n      <h1>Live View of HTML</h1>\n      <OuterHTMLView elementRef={activeDescendantRef} intervalInMS={200} />\n      <h1>Test matrix</h1>\n      <ul>\n        <li>\n          Edge + Windows Narrator\n          <ul>\n            <li>✔️ Do narrate content on arrow keys (when active descendant change).</li>\n            <li>\n              ❌ Do not narrate \"Return to the Hundred Acre Wood\". It narrate \"An authorised sequel was published on\n              ...\". Seems like a browser bug.\n            </li>\n          </ul>\n        </li>\n        <li>\n          Chrome + NVDA:\n          <ul>\n            <li>❌ Do not narrate content on arrow keys (when active descendant change), only narrate \"1 of 5\".</li>\n            <li>\n              ❌ Do not narrate \"Return to the Hundred Acre Wood\". It narrate \"An authorised sequel was published on\n              ...\". Seems like a browser bug.\n            </li>\n          </ul>\n        </li>\n        <li>\n          Firefox + NVDA:\n          <ul>\n            <li>✔️ Do narrate content on arrow keys (when active descendant change).</li>\n            <li>✔️ Do narrate \"Return to the Hundred Acre Wood\".</li>\n            <li>\n              ❌ Do not narrate \"link\" (accessible name) for \"Return to the Hundred Acre Wood\", treated as plain text.\n            </li>\n          </ul>\n        </li>\n        <li>\n          Safari (macOS) + VoiceOver:\n          <ul>\n            <li>✔️ Do narrate SOME content on arrow keys: \"An authorised sequel and 2 more items.\"</li>\n            <li>\n              ✔️ Do narrate \"link\" (accessible name) when pressing <kbd>CAPS</kbd> + <kbd>RIGHT</kbd>: \"link, Return to\n              the Hundred Acre Wood\".\n            </li>\n          </ul>\n        </li>\n        <li>\n          Safari (iPadOS) + VoiceOver:\n          <ul>\n            <li>✔️ Do narrate content on two-finger swipe down.</li>\n            <li>✔️ Do narrate \"link\" (accessible name): \"... sequel Return to the Hundred Acre Wood, link, was ...\"</li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}